/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package presentacion.Empleados;

import Datos.FafricaConexion;
import Entidades.Ciudad;
import Entidades.Cliente;
import Entidades.Cobertura;
import Entidades.Marca;
import Entidades.Modelo;
import Entidades.Poliza;
import Entidades.Region;
import Validaciones.Validaciones;
import Entidades.Vehiculo;
import com.itextpdf.text.Document;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.event.KeyEvent;
import java.io.FileOutputStream;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Types;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.RollbackException;
import javax.persistence.TypedQuery;
import javax.swing.JOptionPane;

/**
 *
 * @author DarKMeYeR
 */
public class ClienteMantenedor extends javax.swing.JFrame {

    EntityManagerFactory emf = Persistence.createEntityManagerFactory("SeguroEscritorioPU");
    EntityManager em = emf.createEntityManager();
    String mensaje = "";   
    public ClienteMantenedor() {
        initComponents();
        llenarComboBoxRegiones();
        llenarComboBoxMarcas();
        chkPerdida.setEnabled(false);
        chkRobo.setEnabled(false);
        chkTerceros.setEnabled(false);
        cbDeduciblePerdida.setEnabled(false);
        cbDeducibleRobo.setEnabled(false);
        cbDeducibleTerceros.setEnabled(false);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        cbCiudad = new javax.swing.JComboBox<>();
        cbRegion = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtCorreo = new javax.swing.JTextField();
        txtNombres = new javax.swing.JTextField();
        txtApellidos = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtFono = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtRut = new javax.swing.JTextField();
        btnBuscarRut = new javax.swing.JButton();
        btnBuscarId = new javax.swing.JButton();
        lblBuscarId = new javax.swing.JLabel();
        lblBuscarRut = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        chkActivo = new javax.swing.JCheckBox();
        btnIngresar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnBorrar = new javax.swing.JButton();
        txtPass = new javax.swing.JPasswordField();
        jPanel3 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        cbMarca = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cbModelo = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        txtPatente = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtAno = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        txtValorFiscal = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        chkTerceros = new javax.swing.JCheckBox();
        chkPerdida = new javax.swing.JCheckBox();
        chkRobo = new javax.swing.JCheckBox();
        cbDeduciblePerdida = new javax.swing.JComboBox<>();
        jLabel24 = new javax.swing.JLabel();
        lblPrimaPerdida = new javax.swing.JLabel();
        btnAgregarVehiculo = new javax.swing.JButton();
        btnEliminarVehiculo = new javax.swing.JButton();
        cbVehiculo = new javax.swing.JComboBox<>();
        jLabel26 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        lblPrimaRobo = new javax.swing.JLabel();
        cbDeducibleRobo = new javax.swing.JComboBox<>();
        lblPrimaTerceros = new javax.swing.JLabel();
        cbDeducibleTerceros = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaMensaje = new javax.swing.JTextArea();
        btnLimpiar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mantenedor Cliente");

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Mantenedor Cliente");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));

        cbRegion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRegionActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("REGION:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("CORREO:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("CIUDAD:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("NOMBRE:");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("APELLIDO:");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("CONTRASEÃ‘A:");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("FONO:");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("DIRECCION:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ID:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("RUT:");

        btnBuscarRut.setText("BUSCAR");
        btnBuscarRut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarRutActionPerformed(evt);
            }
        });

        btnBuscarId.setText("BUSCAR");
        btnBuscarId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarIdActionPerformed(evt);
            }
        });

        lblBuscarId.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblBuscarId.setForeground(new java.awt.Color(255, 255, 255));
        lblBuscarId.setText("          ");

        lblBuscarRut.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblBuscarRut.setForeground(new java.awt.Color(255, 255, 255));
        lblBuscarRut.setText("           ");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("FECHA NACI:");

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("ACTIVO:");

        chkActivo.setBackground(new java.awt.Color(255, 255, 255));
        chkActivo.setSelected(true);

        btnIngresar.setText("INGRESAR");
        btnIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarActionPerformed(evt);
            }
        });

        btnActualizar.setText("ACTUALIZAR");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        btnBorrar.setText("BORRAR");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombres, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel10)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cbCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel17)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(chkActivo))))
                .addGap(44, 44, 44)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFono, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(99, 99, 99))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(266, 266, 266)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtRut, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnBuscarId)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblBuscarId))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnBuscarRut)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblBuscarRut))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addComponent(btnIngresar)
                        .addGap(18, 18, 18)
                        .addComponent(btnActualizar)
                        .addGap(18, 18, 18)
                        .addComponent(btnBorrar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnBuscarId)
                        .addComponent(lblBuscarId))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtRut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscarRut)
                    .addComponent(lblBuscarRut))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(txtApellidos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel13)
                    .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbRegion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(txtFono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbCiudad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17)
                    .addComponent(chkActivo))
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnIngresar)
                    .addComponent(btnActualizar)
                    .addComponent(btnBorrar))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("MARCA:");

        cbMarca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMarcaActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Vehiculos");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("MODELO:");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("PATENTE:");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel21.setForeground(new java.awt.Color(255, 255, 255));
        jLabel21.setText("AÃ‘O:");

        txtValorFiscal.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtValorFiscal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtValorFiscalKeyTyped(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("VALOR FISCAL:");

        chkTerceros.setText("DaÃ±o terceros");
        chkTerceros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkTercerosMouseClicked(evt);
            }
        });

        chkPerdida.setText("Perdida Total");
        chkPerdida.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkPerdidaMouseClicked(evt);
            }
        });

        chkRobo.setText("Robo Total");
        chkRobo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chkRoboMouseClicked(evt);
            }
        });

        cbDeduciblePerdida.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "5", "10" }));
        cbDeduciblePerdida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDeduciblePerdidaActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(255, 255, 255));
        jLabel24.setText("PRIMA:");

        lblPrimaPerdida.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPrimaPerdida.setForeground(new java.awt.Color(255, 255, 255));
        lblPrimaPerdida.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPrimaPerdida.setText("0");

        btnAgregarVehiculo.setText("AGREGAR");
        btnAgregarVehiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarVehiculoActionPerformed(evt);
            }
        });

        btnEliminarVehiculo.setText("ELIMINAR");
        btnEliminarVehiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarVehiculoActionPerformed(evt);
            }
        });

        cbVehiculo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbVehiculoActionPerformed(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setText("Vehiculos:");

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(255, 255, 255));
        jLabel25.setText("COBERTURAS:");

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText("DEDUCIBLE:");

        lblPrimaRobo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPrimaRobo.setForeground(new java.awt.Color(255, 255, 255));
        lblPrimaRobo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPrimaRobo.setText("0");

        cbDeducibleRobo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "5", "10" }));
        cbDeducibleRobo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDeducibleRoboActionPerformed(evt);
            }
        });

        lblPrimaTerceros.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblPrimaTerceros.setForeground(new java.awt.Color(255, 255, 255));
        lblPrimaTerceros.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPrimaTerceros.setText("0");

        cbDeducibleTerceros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "5", "10" }));
        cbDeducibleTerceros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDeducibleTercerosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(267, 267, 267)
                        .addComponent(btnAgregarVehiculo)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminarVehiculo)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(116, 116, 116)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel21)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtAno, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel20)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtPatente, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel18)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbMarca, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel19)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbModelo, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtValorFiscal, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel25)
                                    .addComponent(jLabel24)
                                    .addComponent(jLabel27))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(21, 21, 21)
                                        .addComponent(cbDeduciblePerdida, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(41, 41, 41)
                                        .addComponent(cbDeducibleRobo, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblPrimaPerdida, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(chkPerdida, javax.swing.GroupLayout.Alignment.LEADING)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(206, 206, 206)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(chkRobo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblPrimaRobo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(cbDeducibleTerceros, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblPrimaTerceros, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkTerceros))
                        .addGap(165, 165, 165))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(262, 262, 262)
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbVehiculo, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addGap(2, 2, 2)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbVehiculo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbMarca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18)
                    .addComponent(txtPatente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbModelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(txtAno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtValorFiscal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(chkPerdida)
                    .addComponent(chkRobo)
                    .addComponent(chkTerceros))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel27)
                            .addComponent(cbDeduciblePerdida, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(lblPrimaPerdida)))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(cbDeducibleRobo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblPrimaRobo))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(cbDeducibleTerceros, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblPrimaTerceros))))
                .addGap(21, 21, 21)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminarVehiculo)
                    .addComponent(btnAgregarVehiculo))
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(153, 153, 153));

        txaMensaje.setColumns(20);
        txaMensaje.setRows(5);
        jScrollPane1.setViewportView(txaMensaje);

        btnLimpiar.setText("LIMPIAR");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(327, 327, 327)
                .addComponent(btnLimpiar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLimpiar)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbRegionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRegionActionPerformed
        String item = cbRegion.getSelectedItem().toString();
        String[] itemSplit = item.split("\\s+");
        int id = Integer.parseInt(itemSplit[0].toString());
        llenarComboBoxCiudades(id);
    }//GEN-LAST:event_cbRegionActionPerformed

    private void btnBuscarRutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarRutActionPerformed
        try
        {
            if(!txtRut.getText().isEmpty())
            {
                String rut = txtRut.getText();
                if(Validaciones.validarRut(rut))
                {
                    List<Cliente> listCliente = buscarClienteRut(rut);
                    if(listCliente != null)
                    {
                        String id = listCliente.get(0).getIdCliente();
                        txtId.setText(id.substring(0, id.length()-1));
                        txtNombres.setText(listCliente.get(0).getNombres());
                        txtApellidos.setText(listCliente.get(0).getApellidos());
                        txtCorreo.setText(listCliente.get(0).getCorreo());
                        txtFono.setText(listCliente.get(0).getFono());
                        txtFecha.setText(listCliente.get(0).getFechaNacimiento().toString());
                        txtDireccion.setText(listCliente.get(0).getDireccion());
                        cbRegion.setSelectedItem(listCliente.get(0).getCiudadIdCiudad().getRegionIdRegion().getIdRegion()+ " " + listCliente.get(0).getCiudadIdCiudad().getRegionIdRegion().getNombre());
                        cbCiudad.setSelectedItem(listCliente.get(0).getCiudadIdCiudad().getIdCiudad()+" "+listCliente.get(0).getCiudadIdCiudad().getNombre());
                        
                        llenarcbVehiculos(rut);
                        lblBuscarRut.setText("Rut encontrado");
                    }
                    else
                    {
                        lblBuscarRut.setText("Rut no encontrado");
                    }
                }
                else
                {
                    lblBuscarRut.setText("Rut Invalido");
                }
            }
            else
            {
                lblBuscarRut.setText("Ingrese Rut");
            }
        }
        catch(Exception e)
        {
            lblBuscarRut.setText("Error");
        }
    }//GEN-LAST:event_btnBuscarRutActionPerformed

    private void btnBuscarIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarIdActionPerformed
        try
        {
            if(!txtId.getText().isEmpty())
            {
                int id = Integer.parseInt(txtId.getText());
                List<Cliente> listCliente = buscarClienteId(id);
                if(listCliente != null)
                {
                    txtRut.setText(listCliente.get(0).getRut());
                    txtNombres.setText(listCliente.get(0).getNombres());
                    txtApellidos.setText(listCliente.get(0).getApellidos());
                    txtCorreo.setText(listCliente.get(0).getCorreo());
                    txtFono.setText(listCliente.get(0).getFono());
                    txtFecha.setText(listCliente.get(0).getFechaNacimiento().toString());
                    txtDireccion.setText(listCliente.get(0).getDireccion());
                    cbRegion.setSelectedItem(listCliente.get(0).getCiudadIdCiudad().getRegionIdRegion().getIdRegion()+ " " + listCliente.get(0).getCiudadIdCiudad().getRegionIdRegion().getNombre());
                    cbCiudad.setSelectedItem(listCliente.get(0).getCiudadIdCiudad().getIdCiudad()+" "+listCliente.get(0).getCiudadIdCiudad().getNombre());

                    llenarcbVehiculos(listCliente.get(0).getRut());
                    lblBuscarId.setText("ID encontrada");
                }
                else
                {
                    lblBuscarId.setText("ID no encontrada");
                }            
            }
            else
            {
                lblBuscarId.setText("Ingrese ID");
            }
        }
        catch(Exception e)
        {
            lblBuscarRut.setText("Error");
        }
    }//GEN-LAST:event_btnBuscarIdActionPerformed

    private void btnIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarActionPerformed
        try
        {
            if(camposVaciosCliente())
            {
                Connection cn = new FafricaConexion().Conectar();
                try {

                    String item = cbCiudad.getSelectedItem().toString();
                    String[] itemSplit = item.split("\\s+");
                    short idCiudad = Short.parseShort(itemSplit[0]);
                    Ciudad ciudad = new Ciudad();
                    ciudad.setIdCiudad(idCiudad);                                        

                    Cliente cli = new Cliente();
                    cli.setRut(txtRut.getText());
                    cli.setPass(txtPass.getText());
                    cli.setNombres(txtNombres.getText());
                    cli.setApellidos(txtApellidos.getText());
                    cli.setCorreo(txtCorreo.getText());
                    cli.setFono(txtFono.getText());
                    cli.setFechaNacimiento(txtFecha.getText());
                    String activo = chkActivo.isSelected() ? "t" : "f";
                    cli.setActivo(activo);
                    cli.setDireccion(txtDireccion.getText());
                    cli.setCiudadIdCiudad(ciudad);                    

                    CallableStatement cs = cn.prepareCall("{call ? := F_INSERT_CLIENTE(?,?,?,?,?,?,?,?,?,?)}");
                    cs.registerOutParameter(1, Types.VARCHAR);

                    cs.setString(2, cli.getRut());
                    cs.setString(3, cli.getPass());
                    cs.setString(4, cli.getNombres());
                    cs.setString(5, cli.getApellidos());
                    cs.setString(6, cli.getCorreo());
                    cs.setString(7, cli.getFono());
                    cs.setString(8, cli.getFechaNacimiento());
                    cs.setString(9, cli.getActivo());
                    cs.setString(10, cli.getDireccion());
                    cs.setInt(11, ciudad.getIdCiudad());
                    cs.executeUpdate();
                    String mensaje2 = cs.getString(1);
                    mensaje += mensaje2+" \n";
                    txaMensaje.setText(mensaje);

                }
                catch(Exception e){
                    mensaje += e.getMessage()+"\n";
                    txaMensaje.setText(mensaje);
                }
            }
            else
            {
                mensaje += "Llene todos los campos \n";
                txaMensaje.setText(mensaje);
            }
        }
        catch(Exception e)
        {
            mensaje += e.getMessage()+"\n";
            txaMensaje.setText(mensaje);
        }
    }//GEN-LAST:event_btnIngresarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        try
        {
            if(camposVaciosCliente())
            {
                List<Cliente> listCliente = buscarClienteId(Integer.parseInt(txtId.getText()));
                try {
                    if(listCliente != null)
                    {
                            
                        String item = cbCiudad.getSelectedItem().toString();
                        String[] itemSplit = item.split("\\s+");
                        short idCiudad = Short.parseShort(itemSplit[0]);
                        Ciudad ciudad = new Ciudad();
                        ciudad.setIdCiudad(idCiudad);

                        Cliente cli = new Cliente();
                        cli.setIdCliente(listCliente.get(0).getIdCliente());
                        cli.setRut(txtRut.getText());
                        cli.setPass(txtPass.getText());
                        cli.setNombres(txtNombres.getText());
                        cli.setApellidos(txtApellidos.getText());
                        cli.setCorreo(txtCorreo.getText());
                        cli.setFono(txtFono.getText());
                        cli.setFechaNacimiento(txtFecha.getText());
                        String activo = chkActivo.isSelected() ? "t" : "f";
                        cli.setActivo(activo);
                        cli.setDireccion(txtDireccion.getText());
                        cli.setCiudadIdCiudad(ciudad);

                        em.getTransaction().begin();
                        em.merge(cli);
                        em.getTransaction().commit();

                        mensaje += "Cliente Actualizado \n";
                        txaMensaje.setText(mensaje);
                        
                    }
                    else
                    {
                        mensaje += "Cliente No Existe \n";
                        txaMensaje.setText(mensaje);
                    }
                }
                catch(RollbackException s)
                {
                    mensaje += "No puede actualizar a un rut en uso\n";
                    txaMensaje.setText(mensaje);
                }
                catch(Exception e)
                {
                    mensaje += e.getMessage()+"\n";
                    txaMensaje.setText(mensaje);
                }
            }
            else
            {
                mensaje += "Llene todos los campos \n";
                txaMensaje.setText(mensaje);
            }
        }
        catch(Exception e)
        {
            mensaje += "Datos no validos \n";
            txaMensaje.setText(mensaje);
        }
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        try
        {
            String rut = "";
            int id = 0;
            List<Cliente> listCliente = null;
            if(!txtId.getText().isEmpty() || !txtRut.getText().isEmpty())
            {
                if(!txtId.getText().isEmpty())
                {
                    id = Integer.parseInt(txtId.getText());
                    listCliente = buscarClienteId(id);
                }
                else
                {
                    if(!txtRut.getText().isEmpty())
                    {
                        rut = txtRut.getText();    
                        listCliente = buscarClienteRut(rut);
                    }
                }
                
                if(listCliente != null)
                {
                    em.getTransaction().begin();
                    em.remove(listCliente.get(0));
                    em.getTransaction().commit();
                    mensaje += "Cliente Eliminado \n";
                    txaMensaje.setText(mensaje);
                }
                else
                {
                    mensaje += "Cliente No Existe \n";
                    txaMensaje.setText(mensaje);
                }
            }
            else
            {
                mensaje += "Ingrese la ID o el Rut \n";
                txaMensaje.setText(mensaje);
            }
        }
        catch(Exception e)
        {
            mensaje += "Error \n";
            txaMensaje.setText(mensaje);
        }
    }//GEN-LAST:event_btnBorrarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        mensaje = "";
        txaMensaje.setText(mensaje);
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnAgregarVehiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarVehiculoActionPerformed
        try
        {
            if(camposVaciosVehiculo())
            {
                if(!txtRut.getText().isEmpty())
                {
                    if(ValidarCoberturas())
                    {
                        Connection cn = new FafricaConexion().Conectar();
                        try {
                            String rut = txtRut.getText();
                            List<Cliente> listCliente = buscarClienteRut(rut);
                            
                            if(listCliente != null)
                            {
                                String item = cbModelo.getSelectedItem().toString();
                                String[] itemSplit = item.split("\\s+");
                                String idModelo = itemSplit[0];
                                Modelo mod = new Modelo();
                                mod.setIdModelo(idModelo);

                                Cliente cli = listCliente.get(0);

                                Vehiculo ve = new Vehiculo();
                                ve.setModeloIdModelo(mod);
                                ve.setPatente(txtPatente.getText());
                                ve.setAno(Short.parseShort(txtAno.getText()));
                                ve.setValorFiscal(Integer.parseInt(txtValorFiscal.getText()));
                                ve.setClienteIdCliente(cli);
                                ve.setRut(cli.getRut());
                                List<Cobertura> coberturas = new ArrayList<>();
                                if(chkPerdida.isSelected())
                                {
                                    Cobertura perdida = new Cobertura();
                                    perdida.setNombre(chkPerdida.getText());
                                    int deducible = Integer.parseInt(cbDeduciblePerdida.getSelectedItem().toString());
                                    perdida.setDeducible(deducible);
                                    perdida.setPrima((int)(calcularPrima(deducible)));
                                    coberturas.add(perdida);
                                }
                                if(chkRobo.isSelected())
                                {
                                    Cobertura robo = new Cobertura();
                                    robo.setNombre(chkRobo.getText());
                                    int deducible = Integer.parseInt(cbDeducibleRobo.getSelectedItem().toString());
                                    robo.setDeducible(deducible);
                                    robo.setPrima((int)(calcularPrima(deducible)));
                                    coberturas.add(robo);
                                }
                                if(chkTerceros.isSelected())
                                {
                                    Cobertura terceros = new Cobertura();
                                    terceros.setNombre(chkTerceros.getText());
                                    int deducible = Integer.parseInt(cbDeducibleTerceros.getSelectedItem().toString());
                                    terceros.setDeducible(deducible);
                                    terceros.setPrima((int)(calcularPrima(deducible)));
                                    coberturas.add(terceros);
                                }
                                
                                CallableStatement cs = cn.prepareCall("{call ? := F_INSERT_VEHICULO(?,?,?,?,?)}");
                                cs.registerOutParameter(1, Types.VARCHAR);

                                cs.setString(2, ve.getRut());
                                cs.setString(3, ve.getModeloIdModelo().getIdModelo());
                                cs.setString(4, ve.getPatente());
                                cs.setInt(5, ve.getAno());
                                cs.setInt(6, ve.getValorFiscal());
                                cs.executeUpdate();
                                String mensaje2 = cs.getString(1);
                                String[] mensajeSplit = mensaje2.split("\\s+");
                                String idVehiculo = mensajeSplit[mensajeSplit.length-1];                                
                                mensaje += mensaje2+" \n";
                                if(idVehiculo.substring(idVehiculo.length()-1, idVehiculo.length()).equals("v"))
                                {
                                    for (Cobertura cobertura : coberturas) {
                                        InsertarCoberturas(cobertura, idVehiculo);
                                    }
                                }
                                
                                GenerarPoliza(rut);                                
                                llenarcbVehiculos(rut);
                                txaMensaje.setText(mensaje);
                                
                                
                            }
                            else
                            {
                                mensaje += "Cliente No Existe \n";
                                txaMensaje.setText(mensaje);
                            }

                        }
                        catch(Exception e){
                            mensaje += e.getMessage()+"\n";
                            txaMensaje.setText(mensaje);
                        }
                    }
                    else
                    {
                        mensaje += "Seleccione almenos 1 cobertura \n";
                        txaMensaje.setText(mensaje);  
                    }
                }
                else
                {
                    mensaje += "Ingrese Rut Cliente \n";
                    txaMensaje.setText(mensaje);
                }
            }
            else
            {
                mensaje += "Llene todos los campos \n";
                txaMensaje.setText(mensaje);
            }
        }
        catch(Exception e)
        {
            mensaje += e.getMessage()+"\n";
            txaMensaje.setText(mensaje);
        }
    }//GEN-LAST:event_btnAgregarVehiculoActionPerformed

    private void btnEliminarVehiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarVehiculoActionPerformed
        try
        {            
            if(!txtPatente.getText().isEmpty())
            {     
                List<Vehiculo> listVehiculo = buscarPatente(txtPatente.getText());
                if(listVehiculo != null)
                {
                    em.getTransaction().begin();
                    em.remove(listVehiculo.get(0));
                    em.getTransaction().commit();
                    llenarcbVehiculos(listVehiculo.get(0).getClienteIdCliente().getRut());
                    mensaje += "Vehiculo Eliminado \n";
                    txaMensaje.setText(mensaje);
                    GenerarPoliza(listVehiculo.get(0).getClienteIdCliente().getRut());
                }
                else
                {
                    mensaje += "Vehiculo No Existe \n";
                    txaMensaje.setText(mensaje);
                }
            }
            else
            {
                mensaje += "Ingrese la Patente \n";
                txaMensaje.setText(mensaje);
            }
            
        }        
        catch(Exception e)
        {
            mensaje += "No puede Eliminar un Vehiculo Con Procesos en Curso. (Cierre esos procesos Primero.) \n";
            txaMensaje.setText(mensaje);
        }
    }//GEN-LAST:event_btnEliminarVehiculoActionPerformed

    private void cbMarcaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMarcaActionPerformed
        String item = cbMarca.getSelectedItem().toString();
        String[] itemSplit = item.split("\\s+");
        String id = itemSplit[0].toString();
        llenarComboBoxModelos(id);
    }//GEN-LAST:event_cbMarcaActionPerformed

    private void cbVehiculoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbVehiculoActionPerformed
        try
        {
            String item = cbVehiculo.getSelectedItem().toString();
            String[] itemSplit = item.split("\\s+");
            String id = itemSplit[0].toString();
            List<Vehiculo> listVehiculo = buscarVehiculosId(id);
            if(listVehiculo != null)
            {
                txtPatente.setText(listVehiculo.get(0).getPatente());
                txtAno.setText(Integer.toString(listVehiculo.get(0).getAno()));
                txtValorFiscal.setText(Integer.toString(listVehiculo.get(0).getValorFiscal()));
                cbMarca.setSelectedItem(listVehiculo.get(0).getModeloIdModelo().getMarcaIdMarca().getIdMarca()+" "+listVehiculo.get(0).getModeloIdModelo().getMarcaIdMarca().getNombre());
                cbModelo.setSelectedItem(listVehiculo.get(0).getModeloIdModelo().getIdModelo()+" "+listVehiculo.get(0).getModeloIdModelo().getNombre());
                chkPerdida.setEnabled(true);
                chkRobo.setEnabled(true);
                chkTerceros.setEnabled(true);
            }
        }
        catch(Exception e)
        {
            
        }
    }//GEN-LAST:event_cbVehiculoActionPerformed

    private void txtValorFiscalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtValorFiscalKeyTyped
        char vchar = evt.getKeyChar();
        if(!(Character.isDigit(vchar))
            || (vchar == KeyEvent.VK_BACK_SPACE)
            || (vchar == KeyEvent.VK_DELETE)){
        evt.consume();
        }
        else
        {
            chkPerdida.setEnabled(true);
            chkRobo.setEnabled(true);
            chkTerceros.setEnabled(true);
        }
    }//GEN-LAST:event_txtValorFiscalKeyTyped

    private void chkTercerosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkTercerosMouseClicked
        if(chkTerceros.isSelected()){
            cbDeducibleTerceros.setEnabled(true);
            lblPrimaTerceros.setText(Double.toString(calcularPrima(Integer.parseInt(cbDeducibleTerceros.getSelectedItem().toString()))));            
        }
        else{
            lblPrimaTerceros.setText("0");
            cbDeducibleTerceros.setEnabled(false);
        }
    }//GEN-LAST:event_chkTercerosMouseClicked

    private void chkPerdidaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkPerdidaMouseClicked
        if(chkPerdida.isSelected()){
            cbDeduciblePerdida.setEnabled(true);
            lblPrimaPerdida.setText(Double.toString(calcularPrima(Integer.parseInt(cbDeduciblePerdida.getSelectedItem().toString()))));
        }
        else{
            lblPrimaPerdida.setText("0");
            cbDeduciblePerdida.setEnabled(false);
        }
    }//GEN-LAST:event_chkPerdidaMouseClicked

    private void chkRoboMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chkRoboMouseClicked
        if(chkRobo.isSelected()){
            cbDeducibleRobo.setEnabled(true);
            lblPrimaRobo.setText(Double.toString(calcularPrima(Integer.parseInt(cbDeducibleRobo.getSelectedItem().toString()))));
        }
        else{
            lblPrimaRobo.setText("0");
            cbDeducibleRobo.setEnabled(false);
        }
    }//GEN-LAST:event_chkRoboMouseClicked

    private void cbDeduciblePerdidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDeduciblePerdidaActionPerformed
        lblPrimaPerdida.setText(Double.toString(calcularPrima(Integer.parseInt(cbDeduciblePerdida.getSelectedItem().toString()))));
    }//GEN-LAST:event_cbDeduciblePerdidaActionPerformed

    private void cbDeducibleRoboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDeducibleRoboActionPerformed
        lblPrimaRobo.setText(Double.toString(calcularPrima(Integer.parseInt(cbDeducibleRobo.getSelectedItem().toString()))));
    }//GEN-LAST:event_cbDeducibleRoboActionPerformed

    private void cbDeducibleTercerosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDeducibleTercerosActionPerformed
        lblPrimaTerceros.setText(Double.toString(calcularPrima(Integer.parseInt(cbDeducibleTerceros.getSelectedItem().toString()))));
    }//GEN-LAST:event_cbDeducibleTercerosActionPerformed
    
    private String InsertarCoberturas(Cobertura cobertura, String idVehiculo) {
        try {
            Connection cn = new FafricaConexion().Conectar();
            CallableStatement cs = cn.prepareCall("{call ? := F_INSERT_COBERTURA(?,?,?,?)}");
            cs.registerOutParameter(1, Types.VARCHAR);

            cs.setString(2, cobertura.getNombre());
            cs.setInt(3, cobertura.getDeducible());
            cs.setInt(4, cobertura.getPrima());
            cs.setString(5, idVehiculo);
            cs.executeUpdate();
            return cs.getString(1);
        } catch (Exception e) {
            return null;
        }
    }
    
    private double calcularPrima(int deducible)
    {
        double valor = Double.parseDouble(txtValorFiscal.getText());        
        
        switch (deducible) {
            case 0: valor = (valor * 0.025) * 0.85; break;
            case 5: valor = (valor * 0.02) * 0.8; break;
            case 10: valor = (valor * 0.01) * 0.75; break;
            default:
                return 0;
        }
        
        return valor;
    }
    
    private boolean camposVaciosCliente()
    {
        if(!txtRut.getText().isEmpty() && 
            !txtPass.getText().isEmpty() && 
            !txtNombres.getText().isEmpty() && 
            !txtApellidos.getText().isEmpty() && 
            !txtCorreo.getText().isEmpty() && 
            !txtFono.getText().isEmpty() && 
            !txtFecha.getText().isEmpty() && 
            !txtDireccion.getText().isEmpty()                
            )
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    private boolean camposVaciosVehiculo()
    {
        if(!txtPatente.getText().isEmpty() && 
            !txtAno.getText().isEmpty() && 
            !txtValorFiscal.getText().isEmpty()               
            )
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    private boolean ValidarCoberturas()
    {
        if(chkPerdida.isSelected() || 
            chkRobo.isSelected() || 
            chkTerceros.isSelected()               
            )
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    private List<Cliente> buscarClienteId(int id)
    {
        try {
            TypedQuery consulta = em.createNamedQuery("Cliente.findByIdCliente", Cliente.class);
            List<Cliente> listCliente = consulta.setParameter("idCliente", id+"c").getResultList();
            
            if(listCliente.size() > 0)
            {
                return listCliente;
            }
            else
            {
                return null;
            }
        } catch (Exception e) {
            return null;
        }
    }
    
    private List<Cobertura> buscarCoberturaIdVehiculo(Vehiculo ve)
    {
        try {
            TypedQuery consulta = em.createNamedQuery("Cobertura.findByIdVehiculo", Cobertura.class);
            List<Cobertura> listCobertura = consulta.setParameter("vehiculoIdVehiculo", ve).getResultList();
            
            if(listCobertura.size() > 0)
            {
                return listCobertura;
            }
            else
            {
                return null;
            }
        } catch (Exception e) {
            return null;
        }
    }
    
    private List<Cliente> buscarClienteRut(String rut)
    {
        try {
            rut = rut.replace(".", "");
            rut = rut.replace("-", "");
            TypedQuery consulta = em.createNamedQuery("Cliente.findByRut", Cliente.class);
            List<Cliente> listCliente = consulta.setParameter("rut", rut).getResultList();
            
            if(listCliente.size() > 0)
            {
                return listCliente;
            }
            else
            {
                return null;
            }
        } catch (Exception e) {
            return null;
        }
    }
    
    private List<Vehiculo> buscarPatente(String patente)
    {
        try {
            TypedQuery consulta = em.createNamedQuery("Vehiculo.findByPatente", Vehiculo.class);
            List<Vehiculo> listVehiculo = consulta.setParameter("patente", patente).getResultList();
            
            if(listVehiculo.size() > 0)
            {
                return listVehiculo;
            }
            else
            {
                return null;
            }
        } catch (Exception e) {
            return null;
        }
    }
    
    private List<Vehiculo> buscarVehiculosRut(String rut)
    {
        try {
            rut = rut.replace(".", "");
            rut = rut.replace("-", "");
            TypedQuery consulta = em.createNamedQuery("Vehiculo.findByRut", Vehiculo.class);
            List<Vehiculo> listVehiculo = consulta.setParameter("rut", rut).getResultList();
            
            if(listVehiculo.size() > 0)
            {
                return listVehiculo;
            }
            else
            {
                return null;
            }
        } catch (Exception e) {
            return null;
        }
    }
    
    private List<Vehiculo> buscarVehiculosId(String id)
    {
        try {
            TypedQuery consulta = em.createNamedQuery("Vehiculo.findByIdVehiculo", Vehiculo.class);
            List<Vehiculo> listVehiculo = consulta.setParameter("idVehiculo", id).getResultList();
            
            if(listVehiculo.size() > 0)
            {
                return listVehiculo;
            }
            else
            {
                return null;
            }
        } catch (Exception e) {
            return null;
        }
    }
    
    private List<Poliza> buscarPolizaId(long id)
    {
        try {
            TypedQuery consulta = em.createNamedQuery("Poliza.findByIdPoliza", Poliza.class);
            List<Poliza> listPoliza = consulta.setParameter("idPoliza", id).getResultList();
            
            if(listPoliza.size() > 0)
            {
                return listPoliza;
            }
            else
            {
                return null;
            }
        } catch (Exception e) {
            return null;
        }
    }
    
    private void llenarComboBoxRegiones()
    {
        TypedQuery consulta = em.createNamedQuery("Region.findAll", Region.class);
        List<Region> listRegion = consulta.getResultList();
        cbRegion.removeAllItems();
        if(listRegion.size() > 0)
        {
            for (Region region : listRegion) {
                cbRegion.addItem(region.getIdRegion()+" "+region.getNombre());
            }
        }
        else
        {
            cbRegion.addItem("Sin Datos");
        }
    }
    
    private void llenarComboBoxCiudades(int idregion)
    {
        TypedQuery consulta = em.createNamedQuery("Region.findByIdRegion", Region.class);
        List<Region> listRegion = consulta.setParameter("idRegion", idregion).getResultList();        
        cbCiudad.removeAllItems();
        if(listRegion.size() > 0)
        {
            for (Ciudad ciudad : listRegion.get(0).getCiudadCollection()) {
                cbCiudad.addItem(ciudad.getIdCiudad() +" "+ ciudad.getNombre());
            }
        }
        else
        {
            cbCiudad.addItem("Sin Datos");
        }
    }
    
    private void llenarComboBoxMarcas()
    {
        TypedQuery consulta = em.createNamedQuery("Marca.findAll", Marca.class);
        List<Marca> listMarca = consulta.getResultList();
        cbMarca.removeAllItems();
        if(listMarca.size() > 0)
        {
            for (Marca marca : listMarca) {
                cbMarca.addItem(marca.getIdMarca()+ " " +marca.getNombre());
            }
        }
        else
        {
            cbMarca.addItem("Sin Datos");
        }
    }
    
    private void llenarComboBoxModelos(String idMarca)
    {
        TypedQuery consulta = em.createNamedQuery("Marca.findByIdMarca", Marca.class);
        List<Marca> listMarca = consulta.setParameter("idMarca", idMarca).getResultList();        
        cbModelo.removeAllItems();
        if(listMarca.size() > 0)
        {
            for (Modelo modelo : listMarca.get(0).getModeloCollection()) {
                cbModelo.addItem(modelo.getIdModelo() +" "+ modelo.getNombre());
            }
        }
        else
        {
            cbModelo.addItem("Sin Datos");
        }
    }
    
    private void GenerarPoliza(String rut) throws ParseException, SQLException {
        List<Cliente> listCliente = buscarClienteRut(rut);
                if(listCliente != null)
                {
                    Poliza poliza = new Poliza();
                    poliza.setIdPoliza(Long.parseLong(listCliente.get(0).getIdCliente().substring(0, listCliente.get(0).getIdCliente().length()-1)));
                    List<Poliza> listaPoliza = buscarPolizaId(poliza.getIdPoliza());
                    SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
                    if(listaPoliza == null)
                    {
                        poliza.setIdCliente(listCliente.get(0).getIdCliente());                        
                        Calendar calNow = Calendar.getInstance();
                        calNow.add(Calendar.MONTH, +1);
                        Date date1 = calNow.getTime();
                        String fechaActual = sdf.format(date1);
                        poliza.setFechaVencimiento(sdf.parse(fechaActual));

                        poliza.setAlDia("t");
                    }
                    else
                    {
                        poliza = listaPoliza.get(0);
                    }
                    List<Vehiculo> listVehiculos = buscarVehiculosRut(rut);                
                    if(listVehiculos != null)
                    {
                        int total = 0;
                        listCliente.get(0).setVehiculoCollection(listVehiculos);
                        Cliente cli = listCliente.get(0);
                        String activo = cli.getActivo().equals("t") ? "Si" : "No";
                        String doc = "";
                        doc += "*******************************POLIZA DE SEGURO AUTOMOTRIZ**********************************\n";
                        doc += "                                                                                                       \n";
                        doc += "NOMBRE: "+cli.getNombres()+" "+cli.getApellidos()+"          \t \t Direccion: "+cli.getDireccion()+"\n";
                        doc += "Activo: "+activo+"                                           \t Correo: "+cli.getCorreo()+"\n";
                        doc += "Vencimiento Pago: "+sdf.format(poliza.getFechaVencimiento())+"\n";
                        doc += "                                                                                                      \n";
                        doc += "*******************************************************************************************************\n";
                        doc += "*******************************************VEHICULOS**********************************************\n";
                        for (Vehiculo ve : cli.getVehiculoCollection()) 
                        {
                        doc += "Marca: "+ve.getModeloIdModelo().getMarcaIdMarca().getNombre()+"                            \t \t Modelo: "+ve.getModeloIdModelo().getNombre()+" \n";
                        doc += "Patente: "+ve.getPatente()+"                             \t \t AÃ±o: "+ve.getAno()+" \n";
                        doc += "Valor Fiscal : $"+ve.getValorFiscal()+"                             \n";
                        doc += "-----------------------------------------------------COBERTURAS----------------------------------------------------\n";
                            int subtotal = 0;
                            for (Cobertura cobertura : ve.getCoberturaCollection()) {
                                subtotal += cobertura.getPrima();
                                doc += cobertura.getNombre()+": $"+ve.getValorFiscal()+" \t Deducible: "+cobertura.getDeducible()+"%\t Prima: $"+cobertura.getPrima()+"\n";                                    
                            }
                            total += subtotal;
                            doc += "SUBTOTAL: $"+subtotal+"\n";
                            doc += "IVA: $"+subtotal*0.19+"\n";
                            doc += "TOTAL: $"+(subtotal+(subtotal*0.19))+"\n";
                            doc += "******************************************************************************************************\n";
                        }    
                        doc += "                                                                                                              \n";
                        total += total * 0.19;
                        doc += "\t\t TOTAL A PAGAR: $"+total+"\n";
                        poliza.setTotalPagar(total);
                        doc += "                                                                                                              \n";
                        doc += "                                                                                                              \n";
                        doc += "******************************************************************************************************\n";
                        doc += "******************************************************************************************************\n";

                        doc += "                                                                                                              \n";
                        doc += "                                                                                                              \n";
                        doc += "                                                                                                              \n";
                        String indented = doc.replaceAll("(?m)^", "\t");

                        Insertarpoliza(poliza);


                        try {
                            String contenido=indented;
                            FileOutputStream archivo = new FileOutputStream("C:\\poliza"+cli.getIdCliente()+".pdf");
                            Document docu = new Document();
                            PdfWriter.getInstance(docu, archivo);
                            docu.open();
                            docu.add(new Paragraph(contenido));

                            docu.close();

                            mensaje += "Pdf Poliza Generada/Actualizada: poliza"+cli.getIdCliente()+".pdf \n";
                            txaMensaje.setText(mensaje);
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, e.getMessage(),"ERROR",0);
                        }
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Cliente No registrado","",2);
                }
    }

    private String Insertarpoliza(Poliza poliza) throws SQLException {
        Connection cn = new FafricaConexion().Conectar();
        java.sql.Date sqlDate = new java.sql.Date(poliza.getFechaVencimiento().getTime());

        CallableStatement cs = cn.prepareCall("{call ? := F_INSERT_POLIZA(?,?,?,?,?)}");
        cs.registerOutParameter(1, Types.VARCHAR);

        cs.setLong(2, poliza.getIdPoliza());
        cs.setString(3, poliza.getAlDia());
        cs.setDate(4, sqlDate);
        cs.setLong(5, poliza.getTotalPagar());
        cs.setString(6, poliza.getIdCliente());
        cs.executeUpdate();
        return cs.getString(1);
    }
    
    private void llenarcbVehiculos(String rut) {
        cbVehiculo.removeAllItems();
        List<Vehiculo> listVehiculo = buscarVehiculosRut(rut); 
        if(listVehiculo != null)
        {
            for (Vehiculo vehiculo : listVehiculo) {
                cbVehiculo.addItem(vehiculo.getIdVehiculo()+" "+vehiculo.getPatente()+" "+vehiculo.getModeloIdModelo().getMarcaIdMarca().getNombre());
            }
        }
        else
        {
            cbVehiculo.addItem("Sin Vehiculos");
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AvanceReparacionTaller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AvanceReparacionTaller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AvanceReparacionTaller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AvanceReparacionTaller.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClienteMantenedor().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregarVehiculo;
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnBuscarId;
    private javax.swing.JButton btnBuscarRut;
    private javax.swing.JButton btnEliminarVehiculo;
    private javax.swing.JButton btnIngresar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JComboBox<String> cbCiudad;
    private javax.swing.JComboBox<String> cbDeduciblePerdida;
    private javax.swing.JComboBox<String> cbDeducibleRobo;
    private javax.swing.JComboBox<String> cbDeducibleTerceros;
    private javax.swing.JComboBox<String> cbMarca;
    private javax.swing.JComboBox<String> cbModelo;
    private javax.swing.JComboBox<String> cbRegion;
    private javax.swing.JComboBox<String> cbVehiculo;
    private javax.swing.JCheckBox chkActivo;
    private javax.swing.JCheckBox chkPerdida;
    private javax.swing.JCheckBox chkRobo;
    private javax.swing.JCheckBox chkTerceros;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBuscarId;
    private javax.swing.JLabel lblBuscarRut;
    private javax.swing.JLabel lblPrimaPerdida;
    private javax.swing.JLabel lblPrimaRobo;
    private javax.swing.JLabel lblPrimaTerceros;
    private javax.swing.JTextArea txaMensaje;
    private javax.swing.JTextField txtAno;
    private javax.swing.JTextField txtApellidos;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtFono;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNombres;
    private javax.swing.JPasswordField txtPass;
    private javax.swing.JTextField txtPatente;
    private javax.swing.JTextField txtRut;
    private javax.swing.JTextField txtValorFiscal;
    // End of variables declaration//GEN-END:variables

}
